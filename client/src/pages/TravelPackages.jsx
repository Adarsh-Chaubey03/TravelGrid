import React, { useState, useCallback, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { packages } from "../data/PackageData";
import Navbar from "../components/Custom/Navbar";
import { Search, X, ChevronDown, CheckCircle } from "lucide-react";
import { useTheme } from "../context/ThemeContext";

const parsePrice = (priceStr) => {
Â  if (!priceStr) return 0;
Â  const digitsOnly = String(priceStr).replace(/[^\d]/g, "");
Â  return parseInt(digitsOnly, 10);
};

const FilterDropdown = ({ title, options, selected, onSelect, isDarkMode, type }) => {
Â  const [isOpen, setIsOpen] = useState(false);
Â  const toggleOpen = () => setIsOpen(!isOpen);

Â  const displayValue = useMemo(() => {
Â  Â  if (selected === "All") return `All ${title}`;
Â  Â  if (type === "duration") {
Â  Â  Â  const durationMap = {
Â  Â  Â  Â  "1-3": "1-3 Days",
Â  Â  Â  Â  "4-7": "4-7 Days",
Â  Â  Â  Â  "8-14": "8-14 Days",
Â  Â  Â  Â  "15+": "15+ Days",
Â  Â  Â  };
Â  Â  Â  return durationMap[selected] || selected;
Â  Â  }
Â  Â  if (type === "rating") {
Â  Â  Â  const ratingMap = {
Â  Â  Â  Â  0: "All",
Â  Â  Â  Â  1: "1 Star & Up",
Â  Â  Â  Â  2: "2 Stars & Up",
Â  Â  Â  Â  3: "3 Stars & Up",
Â  Â  Â  Â  4: "4 Stars & Up",
Â  Â  Â  Â  5: "5 Stars Only",
Â  Â  Â  };
Â  Â  Â  return ratingMap[selected] || selected;
Â  Â  }
Â  Â  return selected;
Â  }, [selected, title, type]);

Â  return (
Â  Â  <div className="relative">
Â  Â  Â  <button
Â  Â  Â  Â  onClick={toggleOpen}
Â  Â  Â  Â  className={`w-full flex justify-between items-center rounded-lg px-4 py-3 text-lg font-semibold transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-pink-400 ${
Â  Â  Â  Â  Â  isDarkMode
Â  Â  Â  Â  Â  Â  ? "bg-slate-800 text-pink-200 hover:bg-slate-700"
Â  Â  Â  Â  Â  Â  : "bg-white text-gray-800 hover:bg-gray-200"
Â  Â  Â  Â  }`}
Â  Â  Â  >
Â  Â  Â  Â  <span>{displayValue}</span>
Â  Â  Â  Â  <ChevronDown size={20} className={`transition-transform duration-200 ${isOpen ? "rotate-180" : ""}`} />
Â  Â  Â  </button>
Â  Â  Â  {isOpen && (
Â  Â  Â  Â  <div className={`absolute z-10 w-full mt-2 rounded-lg shadow-xl overflow-hidden max-h-64 overflow-y-auto ${
Â  Â  Â  Â  Â  isDarkMode ? "bg-slate-800 border border-pink-400/20" : "bg-white border border-gray-300"
Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  {type !== "rating" && (
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => { onSelect("All"); setIsOpen(false); }}
Â  Â  Â  Â  Â  Â  Â  className={`w-full text-left px-4 py-3 transition-colors duration-200 ${
Â  Â  Â  Â  Â  Â  Â  Â  selected === "All" ? (isDarkMode ? "bg-pink-700 text-white" : "bg-pink-200 text-pink-900") : (isDarkMode ? "hover:bg-pink-900 text-pink-200" : "hover:bg-gray-100 text-gray-800")
Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  All {title}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  {options.map((option, index) => (
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  onClick={() => { onSelect(option); setIsOpen(false); }}
Â  Â  Â  Â  Â  Â  Â  className={`w-full text-left px-4 py-3 flex items-center justify-between transition-colors duration-200 ${
Â  Â  Â  Â  Â  Â  Â  Â  selected === option ? (isDarkMode ? "bg-pink-700 text-white" : "bg-pink-200 text-pink-900") : (isDarkMode ? "hover:bg-pink-900 text-pink-200" : "hover:bg-gray-100 text-gray-800")
Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {type === "rating" ? `${option} Star${option > 1 ? 's' : ''} & Up` : option}
Â  Â  Â  Â  Â  Â  Â  {selected === option && <CheckCircle size={20} />}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

const TravelPackages = () => {
Â  const [minRating, setMinRating] = useState(0);
Â  const [maxPrice, setMaxPrice] = useState(Infinity);
Â  const [selectedContinent, setSelectedContinent] = useState("All");
Â  const [selectedCountry, setSelectedCountry] = useState("All");
Â  const [selectedSeason, setSelectedSeason] = useState("All");
Â  const [selectedDuration, setSelectedDuration] = useState("All");
Â  const [searchTerm, setSearchTerm] = useState("");
Â  const { isDarkMode } = useTheme();
Â  const navigate = useNavigate();

Â  const filteredPackages = useCallback(() => {
Â  Â  return packages.filter((pkg) => {
Â  Â  Â  const matchContinent =
Â  Â  Â  Â  selectedContinent === "All" || pkg.continent === selectedContinent;
Â  Â  Â  const matchCountry =
Â  Â  Â  Â  selectedCountry === "All" || pkg.country === selectedCountry;
Â  Â  Â  const matchSeason =
Â  Â  Â  Â  selectedSeason === "All" || pkg.season === selectedSeason;
Â  Â  Â  const match = pkg.duration.match(/^(\d+)/);
Â  Â  Â  const days = match ? Number(match[1]) : 0;
Â  Â  Â  const matchDuration =
Â  Â  Â  Â  selectedDuration === "All" ||
Â  Â  Â  Â  (selectedDuration === "1-3" && days <= 3) ||
Â  Â  Â  Â  (selectedDuration === "4-7" && days >= 4 && days <= 7) ||
Â  Â  Â  Â  (selectedDuration === "8-14" && days >= 8 && days <= 14) ||
Â  Â  Â  Â  (selectedDuration === "15+" && days > 14);
Â  Â  Â  const matchRating = pkg.rating >= minRating;
Â  Â  Â  const matchPrice = parsePrice(pkg.price) <= maxPrice;
Â  Â  Â  let matchSearch = true;
Â  Â  Â  if (searchTerm) {
Â  Â  Â  Â  const lowerSearch = searchTerm.toLowerCase();
Â  Â  Â  Â  const searchFields = [
Â  Â  Â  Â  Â  pkg.title || '',
Â  Â  Â  Â  Â  pkg.country || '',
Â  Â  Â  Â  Â  pkg.continent || '',
Â  Â  Â  Â  Â  pkg.description || '',
Â  Â  Â  Â  Â  pkg.highlights ? pkg.highlights.join(' ') : ''
Â  Â  Â  Â  ].join(' ').toLowerCase();
Â  Â  Â  Â  matchSearch = searchFields.includes(lowerSearch);
Â  Â  Â  }
Â  Â  Â  return (
Â  Â  Â  Â  matchContinent &&
Â  Â  Â  Â  matchCountry &&
Â  Â  Â  Â  matchSeason &&
Â  Â  Â  Â  matchDuration &&
Â  Â  Â  Â  matchRating &&
Â  Â  Â  Â  matchPrice &&
Â  Â  Â  Â  matchSearch
Â  Â  Â  );
Â  Â  });
Â  }, [
Â  Â  selectedContinent,
Â  Â  selectedCountry,
Â  Â  selectedSeason,
Â  Â  selectedDuration,
Â  Â  minRating,
Â  Â  maxPrice,
Â  Â  searchTerm
Â  ]);

Â  const handlePriceChange = (e) => {
Â  Â  const val = e.target.value;
Â  Â  if (val === "") setMaxPrice(Infinity);
Â  Â  else setMaxPrice(Number(val));
Â  };
Â  const clearSearch = () => setSearchTerm("");

Â  const getUniqueOptions = (key) => {
Â  Â  const values = packages.map((pkg) => pkg[key]);
Â  Â  return [...new Set(values)].sort();
Â  };

Â  const getDurationOptions = () => {
Â  Â  const durations = packages.map(pkg => {
Â  Â  Â  const match = pkg.duration.match(/^(\d+)/);
Â  Â  Â  return match ? Number(match[1]) : 0;
Â  Â  });
Â  Â  const ranges = new Set();
Â  Â  durations.forEach(val => {
Â  Â  Â  if (val <= 3) ranges.add("1-3");
Â  Â  Â  else if (val <= 7) ranges.add("4-7");
Â  Â  Â  else if (val <= 14) ranges.add("8-14");
Â  Â  Â  else ranges.add("15+");
Â  Â  });
Â  Â  return Array.from(ranges).sort((a, b) => parseInt(a) - parseInt(b));
Â  };

Â  const continentOptions = getUniqueOptions("continent");
Â  const countryOptions = getUniqueOptions("country");
Â  const seasonOptions = getUniqueOptions("season");
Â  const durationOptions = getDurationOptions();
Â  const ratingOptions = [1, 2, 3, 4, 5];

Â  return (
Â  Â  <div
Â  Â  Â  className={`flex flex-col min-h-screen w-full overflow-x-hidden transition-colors duration-500 ${
Â  Â  Â  Â  isDarkMode
Â  Â  Â  Â  Â  ? "bg-gradient-to-br from-slate-900 to-purple-950 text-white"
Â  Â  Â  Â  Â  : "bg-gradient-to-br from-rose-300 via-blue-200 to-gray-300 text-gray-900"
Â  Â  Â  }`}
Â  Â  >
Â  Â  Â  <Navbar />
Â  Â  Â  <main className="flex flex-col flex-1 w-full items-center pt-24">
Â  Â  Â  Â  <section className="w-full py-24 text-center px-4">
Â  Â  Â  Â  Â  <h1 className={`text-4xl md:text-5xl font-extrabold mb-4 ${
Â  Â  Â  Â  Â  Â  isDarkMode ? 'text-pink-300' : 'text-travel-text'
Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Discover Our <span className={isDarkMode ? "text-pink-400" : "text-pink-500"}>Travel Packages</span>
Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  <p className={`text-lg md:text-xl max-w-2xl mx-auto mb-6 ${
Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-200" : "text-pink-700"
Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Handpicked vacation deals crafted for unforgettable experiences.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <div className="flex justify-center mb-8">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate('/travel-plan-generator')}
Â  Â  Â  Â  Â  Â  Â  className="bg-gradient-to-r from-pink-600 to-pink-500 hover:from-pink-500 hover:to-pink-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 flex items-center shadow-md"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <span className="mr-2">ðŸŽ¯</span>
Â  Â  Â  Â  Â  Â  Â  Create Custom Travel Plan
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="max-w-3xl mx-auto mb-8 relative">
Â  Â  Â  Â  Â  Â  <div className="relative">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Search destinations, packages, or keywords..."
Â  Â  Â  Â  Â  Â  Â  Â  value={searchTerm}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchTerm(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  className={`w-full rounded-xl px-5 py-4 pl-14 pr-12 text-lg transition-colors focus:outline-none focus:ring-2 focus:ring-pink-400 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-slate-800 text-white placeholder-slate-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-white text-gray-900 placeholder-gray-500"
Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <div className={`absolute left-4 top-1/2 transform -translate-y-1/2 ${
Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-300" : "text-gray-500"
Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  <Search size={24} />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  {searchTerm && (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={clearSearch}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`absolute right-4 top-1/2 transform -translate-y-1/2 transition-colors ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "text-pink-300 hover:text-white"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "text-gray-400 hover:text-black"
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <X size={24} />
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  {searchTerm && (
Â  Â  Â  Â  Â  Â  Â  <div className={`mt-2 text-sm ${isDarkMode ? "text-pink-300" : "text-pink-600"}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Searching for: <span className="font-semibold">{searchTerm}</span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  {/* Filter dropdowns */}
Â  Â  Â  Â  Â  <div
 className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 w-full p-6 rounded-3xl shadow-lg mt-4 z-50 transition-colors duration-500 items-end relative ${
    isDarkMode
      ? "bg-slate-900/50 backdrop-blur-md border border-pink-400/20"
      : "bg-white/80 backdrop-blur-sm border border-pink-300"
  }`}
>
  <FilterDropdown
    title="Rating"
    options={ratingOptions}
    selected={minRating}
    onSelect={setMinRating}
    isDarkMode={isDarkMode}
    type="rating"
  />
  <FilterDropdown
    title="Continent"
    options={continentOptions}
    selected={selectedContinent}
    onSelect={setSelectedContinent}
    isDarkMode={isDarkMode}
  />
  <FilterDropdown
    title="Country"
    options={countryOptions}
    selected={selectedCountry}
    onSelect={setSelectedCountry}
    isDarkMode={isDarkMode}
  />
  <FilterDropdown
    title="Season"
    options={seasonOptions}
    selected={selectedSeason}
    onSelect={setSelectedSeason}
    isDarkMode={isDarkMode}
  />
  <FilterDropdown
    title="Duration"
    options={durationOptions}
    selected={selectedDuration}
    onSelect={setSelectedDuration}
    isDarkMode={isDarkMode}
    type="duration"
  />
  <div className="flex flex-col gap-1 text-left">
    <label htmlFor="maxPrice" className={`text-md font-semibold ${isDarkMode ? "text-pink-300" : "text-pink-700"}`}>
      Max Price (â‚¹):
    </label>
    <input
      type="number"
      id="maxPrice"
      placeholder="No limit"
      onChange={handlePriceChange}
      min="0"
      className={`w-full rounded-lg px-4 py-3 text-lg focus:outline-none focus:ring-2 focus:ring-pink-400 transition-colors ${
        isDarkMode
          ? "bg-slate-800 text-white placeholder-slate-400"
          : "bg-white text-gray-900 placeholder-gray-500"
      }`}
    />
  </div>
</div>
Â  Â  Â  Â  </section>
Â  Â  Â  Â  {/* Filtered Packages */}
Â  Â  Â  Â  <section className="max-w-7xl w-full px-4 pb-16 grid gap-10 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 relative z-10">
Â  Â  Â  Â  Â  {filteredPackages().length > 0 ? (
Â  Â  Â  Â  Â  Â  filteredPackages().map((pkg) => (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={pkg.id}
Â  Â  Â  Â  Â  Â  Â  Â  className={`group backdrop-blur-sm border border-pink-400/20 rounded-3xl shadow-xl cursor-pointer flex flex-col transition-all duration-500 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-white/5 hover:bg-white/10"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-white/80 hover:bg-gray-100/80"
Â  Â  Â  Â  Â  Â  Â  Â  } hover:scale-[1.02]`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate(`/package/${pkg.id}`)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={pkg.image}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={pkg.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  loading="lazy"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-56 object-cover rounded-t-3xl transition-transform duration-500 group-hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-6 flex-1 flex flex-col">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className={`text-2xl font-semibold mb-1 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-white" : "text-gray-900"
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pkg.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={isDarkMode ? "text-pink-300" : "text-gray-600"}>{pkg.duration}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex gap-1 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {[...Array(5)].map((_, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={idx}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`w-5 h-5 transition-colors duration-300 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  idx < pkg.rating
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "text-yellow-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : isDarkMode
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "text-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "text-gray-300"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fill="currentColor"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  viewBox="0 0 20 20"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <path d="M9.049 2.927a1 1 0 011.902 0l1.517 4.674a1 1 0 00.95.69h4.911c.969 0 1.371 1.24.588 1.81l-3.978 2.89a1 1 0 00-.364 1.118l1.517 4.674c.3.921-.755 1.688-1.538 1.118l-3.978-2.89a1 1 0 00-1.176 0l-3.978 2.89c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.364-1.118l-3.978-2.89c-.784-.57-.38-1.81.588-1.81h4.912a1 1 0 00.95-.69l1.517-4.674z" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={isDarkMode ? "text-pink-200" : "text-black-800"}>{pkg.price} â‚¹</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className={`text-lg font-bold mb-2 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-400" : "text-pink-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Reviews
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pkg.reviews && pkg.reviews.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul className={`space-y-1 text-sm max-h-28 overflow-y-auto pr-2 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-100" : "text-gray-900"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pkg.reviews.slice(0, 1).map((review, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={idx}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={isDarkMode ? "text-pink-300" : "text-pink-600"} style={{ fontWeight: "bold" }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {review.name}:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>{" "}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {review.comment}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-xs italic ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-300" : "text-pink-800"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  No reviews yet.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-row items-center gap-4 mt-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => { e.stopPropagation(); navigate(`/package/${pkg.id}`); }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-gradient-to-r from-pink-600 to-pink-500 text-white px-5 py-2 rounded-lg font-semibold transition-all duration-300 cursor-pointer transform hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Book Now
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className="col-span-full text-center py-16">
Â  Â  Â  Â  Â  Â  Â  <div className="text-6xl mb-4 text-pink-500">ðŸ˜¢</div>
Â  Â  Â  Â  Â  Â  Â  <h3 className={`text-2xl font-bold mb-2 ${
Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-300" : "text-pink-800"
Â  Â  Â  Â  Â  Â  Â  }`}>No packages found</h3>
Â  Â  Â  Â  Â  Â  Â  <p className={`max-w-md mx-auto ${
Â  Â  Â  Â  Â  Â  Â  Â  isDarkMode ? "text-pink-200" : "text-pink-700"
Â  Â  Â  Â  Â  Â  Â  }`}>
Â  Â  Â  Â  Â  Â  Â  Â  {searchTerm
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? `No packages match your search for "${searchTerm}"`
Â  Â  Â  Â  Â  Â  Â  Â  Â  : "No packages match the selected filters"}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  setSearchTerm("");
Â  Â  Â  Â  Â  Â  Â  Â  Â  setMinRating(0);
Â  Â  Â  Â  Â  Â  Â  Â  Â  setMaxPrice(Infinity);
Â  Â  Â  Â  Â  Â  Â  Â  Â  setSelectedContinent("All");
Â  Â  Â  Â  Â  Â  Â  Â  Â  setSelectedCountry("All");
Â  Â  Â  Â  Â  Â  Â  Â  Â  setSelectedSeason("All");
Â  Â  Â  Â  Â  Â  Â  Â  Â  setSelectedDuration("All");
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  className="mt-6 bg-pink-800 hover:bg-pink-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Clear all filters
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </section>
Â  Â  Â  </main>
Â  Â  </div>
Â  );
};

export default TravelPackages;